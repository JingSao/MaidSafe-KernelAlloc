/* config.hpp
Configures the library
(C) 2014 MaidSafe Ltd.
File Created: Nov 2014


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#if !defined(BOOST_KERNELALLOC_HEADERS_ONLY) && !defined(BOOST_ALL_DYN_LINK)
#define BOOST_KERNELALLOC_HEADERS_ONLY 1
#endif

#include "bindlib/include/import.h"

#ifndef __cpp_alias_templates
#error Boost.KernelAlloc needs template alias support in the compiler
#endif
#ifndef __cpp_variadic_templates
#error Boost.KernelAlloc needs variadic template support in the compiler
#endif

#undef BOOST_KERNELALLOC_V1
#undef BOOST_KERNELALLOC_V1_NAMESPACE
#undef BOOST_KERNELALLOC_V1_NAMESPACE_BEGIN
#undef BOOST_KERNELALLOC_V1_NAMESPACE_END
#undef BOOST_KERNELALLOC_V1_STL11_IMPL
#undef BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL
#undef BOOST_KERNELALLOC_USE_LEGACY_FILESYSTEM_SEMANTICS
#undef 

// Default to the C++ 11 STL for atomic, chrono, mutex and thread
#if defined(BOOST_KERNELALLOC_USE_BOOST_THREAD) && BOOST_KERNELALLOC_USE_BOOST_THREAD
# define BOOST_KERNELALLOC_V1_STL11_IMPL boost
#else
# define BOOST_KERNELALLOC_V1_STL11_IMPL std
# ifndef BOOST_KERNELALLOC_USE_BOOST_THREAD
#  define BOOST_KERNELALLOC_USE_BOOST_THREAD 0
# endif
#endif
// Default to the C++ 11 STL if on MSVC (Dinkumware ships a copy), else Boost
#ifndef BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# if _MSC_VER >= 1900  // >= VS 14
#  define BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM 0
# endif
#endif
#ifndef BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# define BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM 1
#endif
#if BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# define BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL boost
# define BOOST_KERNELALLOC_USE_LEGACY_FILESYSTEM_SEMANTICS 1
#else
# define BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL std
#endif
#define BOOST_KERNELALLOC_V1 (boost), (kernel_alloc), (BOOST_BINDLIB_NAMESPACE_VERSION(v1, BOOST_KERNELALLOC_V1_STL11_IMPL, BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL), inline)
#define BOOST_KERNELALLOC_V1_NAMESPACE       BOOST_BINDLIB_NAMESPACE      (BOOST_KERNELALLOC_V1)
#define BOOST_KERNELALLOC_V1_NAMESPACE_BEGIN BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1)
#define BOOST_KERNELALLOC_V1_NAMESPACE_END   BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1)

// From automated matrix generator
#undef BOOST_KERNELALLOC_NEED_DEFINE
#undef BOOST_KERNELALLOC_NEED_DEFINE_DESCRIPTION
#if !BOOST_KERNELALLOC_USE_BOOST_THREAD && !BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# ifndef BOOST_KERNELALLOC_NEED_DEFINE_00
#  define BOOST_KERNELALLOC_NEED_DEFINE_DESCRIPTION "BOOST_KERNELALLOC_USE_BOOST_THREAD=0 BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM=0"
#  define BOOST_KERNELALLOC_NEED_DEFINE_00
#  define BOOST_KERNELALLOC_NEED_DEFINE 1
# endif
#elif BOOST_KERNELALLOC_USE_BOOST_THREAD && !BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# ifndef BOOST_KERNELALLOC_NEED_DEFINE_10
#  define BOOST_KERNELALLOC_NEED_DEFINE_DESCRIPTION "BOOST_KERNELALLOC_USE_BOOST_THREAD=1 BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM=0"
#  define BOOST_KERNELALLOC_NEED_DEFINE_10
#  define BOOST_KERNELALLOC_NEED_DEFINE 1
# endif
#elif !BOOST_KERNELALLOC_USE_BOOST_THREAD && BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# ifndef BOOST_KERNELALLOC_NEED_DEFINE_01
#  define BOOST_KERNELALLOC_NEED_DEFINE_DESCRIPTION "BOOST_KERNELALLOC_USE_BOOST_THREAD=0 BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM=1"
#  define BOOST_KERNELALLOC_NEED_DEFINE_01
#  define BOOST_KERNELALLOC_NEED_DEFINE 1
# endif
#elif BOOST_KERNELALLOC_USE_BOOST_THREAD && BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM
# ifndef BOOST_KERNELALLOC_NEED_DEFINE_11
#  define BOOST_KERNELALLOC_NEED_DEFINE_DESCRIPTION "BOOST_KERNELALLOC_USE_BOOST_THREAD=1 BOOST_KERNELALLOC_USE_BOOST_FILESYSTEM=1"
#  define BOOST_KERNELALLOC_NEED_DEFINE_11
#  define BOOST_KERNELALLOC_NEED_DEFINE 1
# endif
#endif

#ifdef BOOST_KERNELALLOC_NEED_DEFINE

#define BOOST_STL11_ATOMIC_MAP_NAMESPACE_BEGIN        BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_ATOMIC_MAP_NAMESPACE_END          BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR32_T // missing VS14
#define BOOST_STL11_ATOMIC_MAP_NO_ATOMIC_CHAR16_T // missing VS14
#define BOOST_STL11_CHRONO_MAP_NAMESPACE_BEGIN        BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline), (chrono))
#define BOOST_STL11_CHRONO_MAP_NAMESPACE_END          BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline), (chrono))
#define BOOST_STL1z_FILESYSTEM_MAP_NAMESPACE_BEGIN    BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl1z, inline), (filesystem))
#define BOOST_STL1z_FILESYSTEM_MAP_NAMESPACE_END      BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl1z, inline), (filesystem))
// Match Dinkumware's TR2 implementation
#define BOOST_STL1z_FILESYSTEM_MAP_NO_SYMLINK_OPTION
#define BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_OPTION
#define BOOST_STL1z_FILESYSTEM_MAP_NO_CHANGE_EXTENSION
#define BOOST_STL1z_FILESYSTEM_MAP_NO_WRECURSIVE_DIRECTORY_ITERATOR
#define BOOST_STL1z_FILESYSTEM_MAP_NO_EXTENSION
#define BOOST_STL1z_FILESYSTEM_MAP_NO_TYPE_PRESENT
#define BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_FILE_NAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_DIRECTORY_NAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_POSIX_NAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_LEXICOGRAPHICAL_COMPARE
#define BOOST_STL1z_FILESYSTEM_MAP_NO_WINDOWS_NAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_PORTABLE_NAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_BASENAME
#define BOOST_STL1z_FILESYSTEM_MAP_NO_COMPLETE
#define BOOST_STL1z_FILESYSTEM_MAP_NO_IS_REGULAR
#define BOOST_STL1z_FILESYSTEM_MAP_NO_INITIAL_PATH
#define BOOST_STL1z_FILESYSTEM_MAP_NO_PERMISSIONS_PRESENT
#define BOOST_STL1z_FILESYSTEM_MAP_NO_CODECVT_ERROR_CATEGORY
#define BOOST_STL1z_FILESYSTEM_MAP_NO_WPATH
#define BOOST_STL1z_FILESYSTEM_MAP_NO_SYMBOLIC_LINK_EXISTS
#define BOOST_STL1z_FILESYSTEM_MAP_NO_COPY_DIRECTORY
#define BOOST_STL1z_FILESYSTEM_MAP_NO_NATIVE
#define BOOST_STL11_FUTURE_MAP_NAMESPACE_BEGIN        BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_FUTURE_MAP_NAMESPACE_END          BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_MUTEX_MAP_NAMESPACE_BEGIN         BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_MUTEX_MAP_NAMESPACE_END           BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_RATIO_MAP_NAMESPACE_BEGIN         BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_RATIO_MAP_NAMESPACE_END           BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_THREAD_MAP_NAMESPACE_BEGIN        BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_KERNELALLOC_V1, (stl11, inline))
#define BOOST_STL11_THREAD_MAP_NAMESPACE_END          BOOST_BINDLIB_NAMESPACE_END  (BOOST_KERNELALLOC_V1, (stl11, inline))
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, atomic)
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, chrono)
#include BOOST_BINDLIB_INCLUDE_STL1z(bindlib, BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL, filesystem)
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, future)
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, mutex)
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, ratio)
#include BOOST_BINDLIB_INCLUDE_STL11(bindlib, BOOST_KERNELALLOC_V1_STL11_IMPL, thread)

// TODO FIXME: Replace this with bindings
#include "spinlock/include/boost/spinlock/concurrent_unordered_map.hpp"
BOOST_KERNELALLOC_V1_NAMESPACE_BEGIN
  template<class Key, class T, class Hash, class Pred, class Alloc> using concurrent_unordered_map = BOOST_SPINLOCK_V1_NAMESPACE::concurrent_unordered_map<Key, T, Hash, Pred, Alloc>;
  using BOOST_SPINLOCK_V1_NAMESPACE::is_lockable_locked;
  using spins_to_sleep = BOOST_SPINLOCK_V1_NAMESPACE::spins_to_sleep;
  template<size_t _0> using spins_to_yield = BOOST_SPINLOCK_V1_NAMESPACE::spins_to_yield<_0>;
  template<size_t _0, bool _1=true> using spins_to_loop = BOOST_SPINLOCK_V1_NAMESPACE::spins_to_loop<_0, _1>;
  using null_spin_policy = BOOST_SPINLOCK_V1_NAMESPACE::null_spin_policy;
  template<class T> using spinlockbase = BOOST_SPINLOCK_V1_NAMESPACE::spinlockbase<T>;
  template<class T> using lockable_ptr = BOOST_SPINLOCK_V1_NAMESPACE::lockable_ptr<T>;
  template<typename T, template<class> class spinpolicy2=spins_to_loop<125>::policy, template<class> class spinpolicy3=spins_to_yield<250>::policy, template<class> class spinpolicy4=spins_to_sleep::policy> using spinlock = BOOST_SPINLOCK_V1_NAMESPACE::spinlock<T, spinpolicy2, spinpolicy3, spinpolicy4>;
BOOST_KERNELALLOC_V1_NAMESPACE_END


///////////////////////////////////////////////////////////////////////////////
//  Set up dll import/export options
#if (defined(BOOST_KERNELALLOC_DYN_LINK) || defined(BOOST_ALL_DYN_LINK)) && \
    !defined(BOOST_KERNELALLOC_STATIC_LINK)

#if defined(BOOST_KERNELALLOC_SOURCE)
#undef BOOST_KERNELALLOC_HEADERS_ONLY
#define BOOST_KERNELALLOC_DECL BOOST_SYMBOL_EXPORT
#define BOOST_KERNELALLOC_BUILD_DLL
#else
#define BOOST_KERNELALLOC_DECL
#endif
#else
# define BOOST_KERNELALLOC_DECL
#endif // building a shared library

//#define BOOST_THREAD_VERSION 4
//#define BOOST_THREAD_PROVIDES_VARIADIC_THREAD
//#define BOOST_THREAD_DONT_PROVIDE_FUTURE
//#define BOOST_THREAD_PROVIDES_SIGNATURE_PACKAGED_TASK
#if BOOST_KERNELALLOC_HEADERS_ONLY == 1
# define BOOST_KERNELALLOC_HEADERS_ONLY_FUNC_SPEC inline
# define BOOST_KERNELALLOC_HEADERS_ONLY_MEMFUNC_SPEC inline
# define BOOST_KERNELALLOC_HEADERS_ONLY_VIRTUAL_SPEC inline virtual
// GCC gets upset if inline virtual functions aren't defined
# ifdef BOOST_GCC
#  define BOOST_KERNELALLOC_HEADERS_ONLY_VIRTUAL_UNDEFINED_SPEC { BOOST_KERNELALLOC_THROW_FATAL(std::runtime_error("Attempt to call pure virtual member function")); abort(); }
# else
#  define BOOST_KERNELALLOC_HEADERS_ONLY_VIRTUAL_UNDEFINED_SPEC =0;
# endif
#else
# define BOOST_KERNELALLOC_HEADERS_ONLY_FUNC_SPEC extern BOOST_KERNELALLOC_DECL
# define BOOST_KERNELALLOC_HEADERS_ONLY_MEMFUNC_SPEC
# define BOOST_KERNELALLOC_HEADERS_ONLY_VIRTUAL_SPEC virtual
# define BOOST_KERNELALLOC_HEADERS_ONLY_VIRTUAL_UNDEFINED_SPEC =0;
#endif

#if defined(__has_feature)
# if __has_feature(thread_sanitizer)
#  define BOOST_KERNELALLOC_DISABLE_THREAD_SANITIZE __attribute__((no_sanitize_thread))
# endif
#endif
#ifndef BOOST_KERNELALLOC_DISABLE_THREAD_SANITIZE
# define BOOST_KERNELALLOC_DISABLE_THREAD_SANITIZE
#endif

#ifndef BOOST_KERNELALLOC_LAMBDA_MOVE_CAPTURE
# ifdef __cpp_init_captures
#  define BOOST_KERNELALLOC_LAMBDA_MOVE_CAPTURE(var) var=std::move(var)
# else
#  define BOOST_KERNELALLOC_LAMBDA_MOVE_CAPTURE(var) var
# endif
#endif

#endif  // BOOST_KERNELALLOC_NEED_DEFINE

///////////////////////////////////////////////////////////////////////////////
//  Auto library naming
#if !defined(BOOST_KERNELALLOC_SOURCE) && !defined(BOOST_ALL_NO_LIB) && \
    !defined(BOOST_KERNELALLOC_NO_LIB) && !AFIO_STANDALONE && !BOOST_KERNELALLOC_HEADERS_ONLY

#undef BOOST_LIB_NAME
#define BOOST_LIB_NAME BOOST_BINDLIB_NAMESPACE_VERSION(boost_kernelalloc, v1, BOOST_KERNELALLOC_V1_STL11_IMPL, BOOST_KERNELALLOC_V1_FILESYSTEM_IMPL)

// tell the auto-link code to select a dll when required:
#if defined(BOOST_ALL_DYN_LINK) || defined(BOOST_KERNELALLOC_DYN_LINK)
#define BOOST_DYN_LINK
#endif

#include <boost/config/auto_link.hpp>

#endif  // auto-linking disabled

